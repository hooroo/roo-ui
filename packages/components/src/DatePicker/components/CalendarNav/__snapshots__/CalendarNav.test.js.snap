// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CalendarNav /> renders correctly 1`] = `
.c2 {
  vertical-align: middle;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  position: absolute;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0;
}

.c1 {
  border: none;
  margin: 0;
  padding: 0;
  width: auto;
  overflow: visible;
  background: transparent;
  color: inherit;
  font: inherit;
  line-height: normal;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  cursor: pointer;
}

.c1:hover,
.c1:focus {
  outline: none;
}

.c1:disabled {
  cursor: not-allowed;
  box-shadow: none;
}

<CalendarNav
  nextProps={
    Object {
      "onClick": [MockFunction],
    }
  }
  prevProps={
    Object {
      "onClick": [MockFunction],
    }
  }
>
  <CalendarNav__Wrapper
    blacklist={
      Array [
        "m",
        "mt",
        "mr",
        "mb",
        "ml",
        "mx",
        "my",
        "p",
        "pt",
        "pr",
        "pb",
        "pl",
        "px",
        "py",
        "width",
        "fontSize",
        "color",
        "bg",
        "fontFamily",
        "textAlign",
        "lineHeight",
        "fontWeight",
        "fontStyle",
        "letterSpacing",
        "display",
        "maxWidth",
        "minWidth",
        "height",
        "maxHeight",
        "minHeight",
        "size",
        "ratio",
        "verticalAlign",
        "alignItems",
        "alignContent",
        "justifyItems",
        "justifyContent",
        "flexWrap",
        "flexBasis",
        "flexDirection",
        "flex",
        "justifySelf",
        "alignSelf",
        "order",
        "gridGap",
        "gridColumnGap",
        "gridRowGap",
        "gridColumn",
        "gridRow",
        "gridAutoFlow",
        "gridAutoColumns",
        "gridAutoRows",
        "gridTemplateColumns",
        "gridTemplateRows",
        "gridTemplateAreas",
        "gridArea",
        "border",
        "borderTop",
        "borderRight",
        "borderBottom",
        "borderLeft",
        "borderColor",
        "borderRadius",
        "boxShadow",
        "opacity",
        "overflow",
        "background",
        "backgroundImage",
        "backgroundPosition",
        "backgroundRepeat",
        "backgroundSize",
        "position",
        "zIndex",
        "top",
        "right",
        "bottom",
        "left",
        "textStyle",
        "colors",
        "variant",
        "theme",
      ]
    }
  >
    <StyledComponent
      blacklist={
        Array [
          "m",
          "mt",
          "mr",
          "mb",
          "ml",
          "mx",
          "my",
          "p",
          "pt",
          "pr",
          "pb",
          "pl",
          "px",
          "py",
          "width",
          "fontSize",
          "color",
          "bg",
          "fontFamily",
          "textAlign",
          "lineHeight",
          "fontWeight",
          "fontStyle",
          "letterSpacing",
          "display",
          "maxWidth",
          "minWidth",
          "height",
          "maxHeight",
          "minHeight",
          "size",
          "ratio",
          "verticalAlign",
          "alignItems",
          "alignContent",
          "justifyItems",
          "justifyContent",
          "flexWrap",
          "flexBasis",
          "flexDirection",
          "flex",
          "justifySelf",
          "alignSelf",
          "order",
          "gridGap",
          "gridColumnGap",
          "gridRowGap",
          "gridColumn",
          "gridRow",
          "gridAutoFlow",
          "gridAutoColumns",
          "gridAutoRows",
          "gridTemplateColumns",
          "gridTemplateRows",
          "gridTemplateAreas",
          "gridArea",
          "border",
          "borderTop",
          "borderRight",
          "borderBottom",
          "borderLeft",
          "borderColor",
          "borderRadius",
          "boxShadow",
          "opacity",
          "overflow",
          "background",
          "backgroundImage",
          "backgroundPosition",
          "backgroundRepeat",
          "backgroundSize",
          "position",
          "zIndex",
          "top",
          "right",
          "bottom",
          "left",
          "textStyle",
          "colors",
          "variant",
          "theme",
        ]
      }
      forwardedRef={null}
    >
      <Clean.div
        blacklist={
          Array [
            "m",
            "mt",
            "mr",
            "mb",
            "ml",
            "mx",
            "my",
            "p",
            "pt",
            "pr",
            "pb",
            "pl",
            "px",
            "py",
            "width",
            "fontSize",
            "color",
            "bg",
            "fontFamily",
            "textAlign",
            "lineHeight",
            "fontWeight",
            "fontStyle",
            "letterSpacing",
            "display",
            "maxWidth",
            "minWidth",
            "height",
            "maxHeight",
            "minHeight",
            "size",
            "ratio",
            "verticalAlign",
            "alignItems",
            "alignContent",
            "justifyItems",
            "justifyContent",
            "flexWrap",
            "flexBasis",
            "flexDirection",
            "flex",
            "justifySelf",
            "alignSelf",
            "order",
            "gridGap",
            "gridColumnGap",
            "gridRowGap",
            "gridColumn",
            "gridRow",
            "gridAutoFlow",
            "gridAutoColumns",
            "gridAutoRows",
            "gridTemplateColumns",
            "gridTemplateRows",
            "gridTemplateAreas",
            "gridArea",
            "border",
            "borderTop",
            "borderRight",
            "borderBottom",
            "borderLeft",
            "borderColor",
            "borderRadius",
            "boxShadow",
            "opacity",
            "overflow",
            "background",
            "backgroundImage",
            "backgroundPosition",
            "backgroundRepeat",
            "backgroundSize",
            "position",
            "zIndex",
            "top",
            "right",
            "bottom",
            "left",
            "textStyle",
            "colors",
            "variant",
            "theme",
          ]
        }
        className="c0"
      >
        <div
          className="c0"
        >
          <Button
            blacklist={
              Array [
                "verticalAlign",
                "m",
                "mt",
                "mr",
                "mb",
                "ml",
                "mx",
                "my",
                "p",
                "pt",
                "pr",
                "pb",
                "pl",
                "px",
                "py",
                "color",
                "bg",
              ]
            }
            is="button"
            onClick={[MockFunction]}
          >
            <StyledComponent
              blacklist={
                Array [
                  "verticalAlign",
                  "m",
                  "mt",
                  "mr",
                  "mb",
                  "ml",
                  "mx",
                  "my",
                  "p",
                  "pt",
                  "pr",
                  "pb",
                  "pl",
                  "px",
                  "py",
                  "color",
                  "bg",
                ]
              }
              forwardedRef={null}
              is="button"
              onClick={[MockFunction]}
            >
              <Clean.div
                blacklist={
                  Array [
                    "verticalAlign",
                    "m",
                    "mt",
                    "mr",
                    "mb",
                    "ml",
                    "mx",
                    "my",
                    "p",
                    "pt",
                    "pr",
                    "pb",
                    "pl",
                    "px",
                    "py",
                    "color",
                    "bg",
                  ]
                }
                className="c1"
                is="button"
                onClick={[MockFunction]}
                type="button"
              >
                <button
                  className="c1"
                  onClick={[MockFunction]}
                  type="button"
                >
                  <Icon
                    name="chevronLeft"
                  >
                    <StyledComponent
                      forwardedRef={null}
                      name="chevronLeft"
                    >
                      <Base
                        className="c2"
                        name="chevronLeft"
                        size={24}
                        title={null}
                      >
                        <Cleaned
                          className="c2"
                          fill="currentcolor"
                          height={24}
                          title="chevronLeft"
                          viewBox="0 0 24 24"
                          width={24}
                        >
                          <svg
                            className="c2"
                            fill="currentcolor"
                            height={24}
                            title="chevronLeft"
                            viewBox="0 0 24 24"
                            width={24}
                          >
                            <path
                              d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                            />
                          </svg>
                        </Cleaned>
                      </Base>
                    </StyledComponent>
                  </Icon>
                </button>
              </Clean.div>
            </StyledComponent>
          </Button>
          <Button
            blacklist={
              Array [
                "verticalAlign",
                "m",
                "mt",
                "mr",
                "mb",
                "ml",
                "mx",
                "my",
                "p",
                "pt",
                "pr",
                "pb",
                "pl",
                "px",
                "py",
                "color",
                "bg",
              ]
            }
            is="button"
            onClick={[MockFunction]}
          >
            <StyledComponent
              blacklist={
                Array [
                  "verticalAlign",
                  "m",
                  "mt",
                  "mr",
                  "mb",
                  "ml",
                  "mx",
                  "my",
                  "p",
                  "pt",
                  "pr",
                  "pb",
                  "pl",
                  "px",
                  "py",
                  "color",
                  "bg",
                ]
              }
              forwardedRef={null}
              is="button"
              onClick={[MockFunction]}
            >
              <Clean.div
                blacklist={
                  Array [
                    "verticalAlign",
                    "m",
                    "mt",
                    "mr",
                    "mb",
                    "ml",
                    "mx",
                    "my",
                    "p",
                    "pt",
                    "pr",
                    "pb",
                    "pl",
                    "px",
                    "py",
                    "color",
                    "bg",
                  ]
                }
                className="c1"
                is="button"
                onClick={[MockFunction]}
                type="button"
              >
                <button
                  className="c1"
                  onClick={[MockFunction]}
                  type="button"
                >
                  <Icon
                    name="chevronRight"
                  >
                    <StyledComponent
                      forwardedRef={null}
                      name="chevronRight"
                    >
                      <Base
                        className="c2"
                        name="chevronRight"
                        size={24}
                        title={null}
                      >
                        <Cleaned
                          className="c2"
                          fill="currentcolor"
                          height={24}
                          title="chevronRight"
                          viewBox="0 0 24 24"
                          width={24}
                        >
                          <svg
                            className="c2"
                            fill="currentcolor"
                            height={24}
                            title="chevronRight"
                            viewBox="0 0 24 24"
                            width={24}
                          >
                            <path
                              d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                            />
                          </svg>
                        </Cleaned>
                      </Base>
                    </StyledComponent>
                  </Icon>
                </button>
              </Clean.div>
            </StyledComponent>
          </Button>
        </div>
      </Clean.div>
    </StyledComponent>
  </CalendarNav__Wrapper>
</CalendarNav>
`;
