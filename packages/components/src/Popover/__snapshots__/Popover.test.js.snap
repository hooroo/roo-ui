// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Popover /> when popover is closed renders correctly 1`] = `
<div>
  <OnClickOutside(Base)
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    modifiers={
      Object {
        "preventOverflow": Object {
          "enabled": false,
        },
      }
    }
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    stopPropagation={false}
  >
    <Base
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      modifiers={
        Object {
          "preventOverflow": Object {
            "enabled": false,
          },
        }
      }
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      stopPropagation={false}
      zIndex={1}
    >
      <Manager>
        <Reference>
          <InnerReference
            getReferenceRef={[Function]}
          >
            <Box>
              <StyledComponent
                forwardedRef={[Function]}
              >
                <Clean.div
                  className=""
                >
                  <div
                    className=""
                  >
                    <button
                      disabled={false}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                    >
                      Open popover
                    </button>
                  </div>
                </Clean.div>
              </StyledComponent>
            </Box>
          </InnerReference>
        </Reference>
      </Manager>
    </Base>
  </OnClickOutside(Base)>
</div>
`;

exports[`<Popover /> when popover is open renders correctly 1`] = `
.c0 {
  z-index: 1;
}

.c2 {
  height: 0;
  width: 0;
  border: solid transparent;
  border-width: 0.75rem;
  position: absolute;
}

.c1 {
  height: 0;
  width: 0;
  border: solid transparent;
  border-width: 0.75rem;
  position: absolute;
}

<div>
  <OnClickOutside(Base)
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    modifiers={
      Object {
        "preventOverflow": Object {
          "enabled": false,
        },
      }
    }
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    stopPropagation={false}
  >
    <Base
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      modifiers={
        Object {
          "preventOverflow": Object {
            "enabled": false,
          },
        }
      }
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      stopPropagation={false}
      zIndex={1}
    >
      <Manager>
        <Reference>
          <InnerReference
            getReferenceRef={[Function]}
          >
            <Box>
              <StyledComponent
                forwardedRef={[Function]}
              >
                <Clean.div
                  className=""
                >
                  <div
                    className=""
                  >
                    <button
                      disabled={true}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                    >
                      Open popover
                    </button>
                  </div>
                </Clean.div>
              </StyledComponent>
            </Box>
          </InnerReference>
        </Reference>
        <Popper
          modifiers={
            Object {
              "preventOverflow": Object {
                "enabled": false,
              },
            }
          }
        >
          <InnerPopper
            eventsEnabled={true}
            modifiers={
              Object {
                "preventOverflow": Object {
                  "enabled": false,
                },
              }
            }
            placement="bottom"
            positionFixed={false}
            referenceElement={
              <div
                class=""
              >
                <button
                  disabled=""
                >
                  Open popover
                </button>
              </div>
            }
          >
            <Popover__ContentWrapper
              aria-hidden="true"
              className="ignore-react-onclickoutside"
              style={
                Object {
                  "left": 0,
                  "opacity": 0,
                  "pointerEvents": "none",
                  "position": "absolute",
                  "top": 0,
                }
              }
              zIndex={1}
            >
              <StyledComponent
                aria-hidden="true"
                className="ignore-react-onclickoutside"
                forwardedRef={[Function]}
                style={
                  Object {
                    "left": 0,
                    "opacity": 0,
                    "pointerEvents": "none",
                    "position": "absolute",
                    "top": 0,
                  }
                }
                zIndex={1}
              >
                <Clean.div
                  aria-hidden="true"
                  className="ignore-react-onclickoutside c0"
                  style={
                    Object {
                      "left": 0,
                      "opacity": 0,
                      "pointerEvents": "none",
                      "position": "absolute",
                      "top": 0,
                    }
                  }
                  zIndex={1}
                >
                  <div
                    aria-hidden="true"
                    className="ignore-react-onclickoutside c0"
                    style={
                      Object {
                        "left": 0,
                        "opacity": 0,
                        "pointerEvents": "none",
                        "position": "absolute",
                        "top": 0,
                      }
                    }
                  >
                    <p
                      key=".1"
                    >
                      Popover contents
                    </p>
                    <Popover__TriangleBorder
                      style={Object {}}
                    >
                      <StyledComponent
                        forwardedRef={[Function]}
                        style={Object {}}
                      >
                        <Clean.div
                          className="c1"
                          style={Object {}}
                        >
                          <div
                            className="c1"
                            style={Object {}}
                          />
                        </Clean.div>
                      </StyledComponent>
                    </Popover__TriangleBorder>
                    <Popover__Triangle
                      style={Object {}}
                    >
                      <StyledComponent
                        forwardedRef={[Function]}
                        style={Object {}}
                      >
                        <Clean.div
                          className="c2"
                          style={Object {}}
                        >
                          <div
                            className="c2"
                            style={Object {}}
                          />
                        </Clean.div>
                      </StyledComponent>
                    </Popover__Triangle>
                  </div>
                </Clean.div>
              </StyledComponent>
            </Popover__ContentWrapper>
          </InnerPopper>
        </Popper>
      </Manager>
    </Base>
  </OnClickOutside(Base)>
</div>
`;
